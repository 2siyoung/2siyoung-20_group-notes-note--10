정리노트 #10 

예제 13-1
<핵심>
선택 정렬 함수
1. 정렬되지 않은 리스트에서 가장 작은 원소 찾기
2. 과정1에서 찾은 원소의 자리를 정렬되지 않은 리스트의 첫 번째 원소와 바꿈
3. 정렬되지 않은 리스트에서 가장 작은 값을 벽 앞의 정렬된 리스트로 넘김
4. 가상의 벽을 현재 위치에서 한 칸 뒤로 옮겨 검색 범위를 좁힌다. 

void Select_Sort(int *a, int count)
{
      int i, j;
      int min_value, min_index; 

// 패스 반복
      for(i = 0; i < count-1; i++)
      { 

// 정렬되지 않은 리스트의 첫 번째 값 기억
           min_index = i; 
           min_value = a[i]; 

// 과정 1. 최소 원소 찾기 
           for(j = i+1; j < count; j++)
           {
                if(min_value > a[j])
                {
                      min_index = j;
                      min_value = a[ j];
                 }
             }          
//과정 2, 3
            a[min_index] = a[i];
            a[i] = min_value;
        }
} 

예제 13-2
<핵심>
버블 정렬
1. 정렬되지 않은 리스트의 뒤에서부터 앞으로 값을 하나하나 비교하면서 현재 값보다 작은 값이 나타나면 자리를 바꿈. 현재 값이 더 크거나 같으면 앞의 값이 현재 값이 됨
2. 과정1을 반복하면 가장 작은 값이 정렬되지 않은 리스트의 맨 앞에 옴
3. 과정2의 값을 벽 앞 정렬된 리스트로 넘김
4. 가상의 벽을 현재 위치에서 한 칸 뒤로 옮겨 정렬되지 않은 리스트의 범위를 좁힘 

void Bubble_Sort(int *a, int count)
{
       int i;, j;
       int temp;
// 패스 반복
       for(i = 1; i < count-1; i++)
       {
// 최솟값 찾기
             for(j = 1; j < count-1; j++)
             {
                   if(a[j-1] > a[j])
                   {
                        temp = a[j-1];
                        a[j-1] = a[j];
                        a[j] = temp;
                    }
               }
          }
} 

예제 
13-3
<핵심>
삽입 정렬
1. 가상의 벽 바로 뒤의 값을 벽 바로 앞의 값과 비교
2. 가상의 벽 뒤의 값이 크면 가상의 벽을 한 칸 뒤로 옮기고 과정1을 수행
3. 가상의 벽 뒤의 값이 작으면 그 값을 정렬된 리스트의 값과 뒤에서부터 비교해간다.
4. 이동해야 하는 값보다 작은 값을 발견하면 그 값 뒤에 가상의 벽 바로 뒤의 값을 옮김
5. 가상의 벽을 현재 위치에서 한 칸 뒤로 옮겨 정렬되지 않은 리스트의 범위를 좁힘 

void Insert_Sort(int *a, int count){
      int i, j;
      int temp;
// 전체 루프 반복
      for(i = 1; i < count; i++)
      {
           temp = a[i];
           j = i; 

// 원소 삽입 위치 찾기
           while((a[ j-1] > temp) && (j > 0))
           {
                   a[ j] = a[ j-1];
                    j = j-1;
            }
           a[j] = temp;
      }
} 

13-4
<핵심>
셀 정렬
1. h 간격을 설정
2. h 간격만큼 떨어진 원소를 모은 부분집합에서 삽입 정렬을 각각 수행
3. h 간격을 재설정하고 과정2를 반복 

void Shell_Sort(int *a, int count)
{
        int i, j, inc, h; 
        int temp; 

// 변수 h의 변화
       for(h = count/2; h > 0; h /= 2)
       { 

// 각 부분집합 반복
            for(i = 0; i < h; i++)
            { 

// 삽입 정렬
                 for(j = i+ h; j < count; j += h)
                {
                     temp = a[j];
                     inc = j; 

                     while(inc > h-1 && a[inc-h] > temp)
                     {
                           a[inc] = a[inc-h];
                           inc = inc- h;
                      }
                      a[inc] = temp;
                 }
             }
        }
}
